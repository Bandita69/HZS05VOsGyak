[33mcommit 36cd41c6683844977403b4728f664e626fa92c5a[m
Author: Bandita69 <aaandris96@gmail.com>
Date:   Tue Mar 22 17:20:11 2022 +0100

    Create hzs05v7.cpp

[1mdiff --git a/HZS05V_SZORGALMI_1/hzs05v7.cpp b/HZS05V_SZORGALMI_1/hzs05v7.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..fc01700[m
[1m--- /dev/null[m
[1m+++ b/HZS05V_SZORGALMI_1/hzs05v7.cpp[m
[36m@@ -0,0 +1,514 @@[m
[32m+[m[32m// C++ kulonbozo utemezesi algoritmusokhoz[m
[32m+[m[32m#include <cstdlib>[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <queue>[m
[32m+[m[32musing namespace std;[m
[32m+[m
[32m+[m[32mclass process {[m
[32m+[m[32mpublic:[m
[32m+[m[32m    pid_t p_no = 0;[m
[32m+[m[32m    time_t start_AT = 0, AT = 0,[m
[32m+[m[32m           BT_left = 0, BT = 0, temp_BT = 0,[m
[32m+[m[32m           CT = 0, TAT = 0, WT = 0, RT = 0;[m
[32m+[m[32m    int priority = 0;[m
[32m+[m
[32m+[m[32m    // Befejezesi ido[m
[32m+[m[32m    void set_CT(time_t time)[m
[32m+[m[32m    {[m
[32m+[m[32m        CT = time;[m
[32m+[m[32m        set_TAT();[m
[32m+[m[32m        set_WT();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Atfordulasi ido (turn around time)[m
[32m+[m[32m    void set_TAT()[m
[32m+[m[32m    {[m
[32m+[m[32m        TAT = CT - start_AT;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Varakozasi ido[m
[32m+[m[32m    void set_WT()[m
[32m+[m[32m    {[m
[32m+[m[32m        WT = TAT - BT;[m
[32m+[m[32m    }[m
[32m+[m[32m    // Mivel push()-nal frissul az Erkezesi ido, ezert azt kezelni kell[m
[32m+[m[32m    void P_set()[m
[32m+[m[32m    {[m
[32m+[m[32m        start_AT = AT;[m
[32m+[m[32m        BT_left = BT;[m
[32m+[m[32m    }[m
[32m+[m[32m    // Valasz ido[m
[32m+[m[32m    void set_RT(time_t time)[m
[32m+[m[32m    {[m
[32m+[m[32m        RT = time - start_AT;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // '<' Operator tulterhelese[m
[32m+[m[32m    // mivel az erkezesi idonek nagyobb a prioritasa[m[41m [m
[32m+[m[32m    // priority_queue elsonek poppolja a nagyobb erteket[m
[32m+[m[32m    // ezert ki kell csereni a '<' -t '>' hogy a legkisebbet poppolja[m
[32m+[m[32m    friend bool operator<(const process& a, const process& b)[m
[32m+[m[32m    {[m
[32m+[m[32m        return a.AT > b.AT;[m
[32m+[m[32m    }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m
[32m+[m[32mprocess pop_index(priority_queue<process>* main_queue, int index)[m
[32m+[m[32m{[m
[32m+[m[32m    priority_queue<process> rm_index;[m
[32m+[m[32m    int i;[m
[32m+[m[32m    process p;[m
[32m+[m[32m    switch (index) {[m
[32m+[m[32m    case 0:[m
[32m+[m[32m        p = (*main_queue).top();[m
[32m+[m[32m        (*main_queue).pop();[m
[32m+[m[32m        break;[m
[32m+[m[32m    default:[m
[32m+[m[32m        for (i = 0; i < index; i++) {[m
[32m+[m[32m            rm_index.push((*main_queue).top());[m
[32m+[m[32m            (*main_queue).pop();[m
[32m+[m[32m        }[m
[32m+[m[32m        p = (*main_queue).top();[m
[32m+[m[32m        (*main_queue).pop();[m
[32m+[m[32m        while (!(*main_queue).empty()) {[m
[32m+[m[32m            rm_index.push((*main_queue).top());[m
[32m+[m[32m            (*main_queue).pop();[m
[32m+[m[32m        }[m
[32m+[m[32m        (*main_queue) = rm_index;[m
[32m+[m[32m        break;[m
[32m+[m[32m    }[m
[32m+[m[32m    return p;[m
[32m+[m[32m}[m
[32m+[m[32mtime_t min_BT(priority_queue<process> main_queue, time_t clock)[m
[32m+[m[32m{[m
[32m+[m[32m    time_t min = 0;[m
[32m+[m[32m    while (!main_queue.empty() && main_queue.top().AT <= clock) {[m
[32m+[m[32m        if (min == 0 || min > main_queue.top().BT_left)[m
[32m+[m[32m            min = main_queue.top().BT_left;[m
[32m+[m[32m        main_queue.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    return min;[m
[32m+[m[32m}[m
[32m+[m[32mint min_BT_index(priority_queue<process> main_queue, time_t limit)[m
[32m+[m[32m{[m
[32m+[m[32m    int index, i = 0;[m
[32m+[m[32m    time_t min = 0;[m
[32m+[m[32m    while (!main_queue.empty() && main_queue.top().AT <= limit) {[m
[32m+[m[32m        if (min == 0 || main_queue.top().BT_left < min) {[m
[32m+[m[32m            min = main_queue.top().BT_left;[m
[32m+[m[32m            index = i;[m
[32m+[m[32m        }[m
[32m+[m[32m        main_queue.pop();[m
[32m+[m[32m        i++;[m
[32m+[m[32m    }[m
[32m+[m[32m    return index;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// RR algoritmus[m
[32m+[m[32mpriority_queue<process> RR_run(priority_queue<process> ready_queue,[m
[32m+[m[32m                               time_t Time_Slice,[m
[32m+[m[32m                               queue<process>* gantt)[m
[32m+[m[32m{[m
[32m+[m[32m    priority_queue<process> completion_queue;[m
[32m+[m[32m    process p;[m
[32m+[m[32m    time_t clock = 0;[m
[32m+[m[41m  [m
[32m+[m[32m    while (!ready_queue.empty()) {[m
[32m+[m[32m        while (clock < ready_queue.top().AT) {[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[32m        if (p.temp_BT > 0) {[m
[32m+[m[32m            p.p_no = -1;[m
[32m+[m[32m            p.CT = clock;[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m        p = ready_queue.top();[m
[32m+[m[32m        ready_queue.pop();[m
[32m+[m[41m  [m
[32m+[m[32m        if (p.AT == p.start_AT)[m
[32m+[m[32m            p.set_RT(clock);[m
[32m+[m[41m  [m
[32m+[m[32m        while (p.BT_left > 0 && (p.temp_BT < Time_Slice[m
[32m+[m[32m                                 || ready_queue.empty()[m
[32m+[m[32m                                 || clock < ready_queue.top().AT)) {[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            p.BT_left--;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[41m  [m
[32m+[m[32m        if (p.BT_left == 0) {[m
[32m+[m[32m            p.AT = p.start_AT;[m
[32m+[m[32m            p.set_CT(clock);[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m            p.temp_BT = 0;[m
[32m+[m[32m            completion_queue.push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            p.AT = clock;[m
[32m+[m[32m            p.CT = clock;[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m            p.temp_BT = 0;[m
[32m+[m[32m            ready_queue.push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
[32m+[m[32m    return completion_queue;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// FCFS algoritmus[m
[32m+[m[32mpriority_queue<process> FCFS_run(priority_queue<process> ready_queue,[m
[32m+[m[32m                                 queue<process>* gantt)[m
[32m+[m[32m{[m
[32m+[m[32m    priority_queue<process> completion_queue;[m
[32m+[m[32m    process p;[m
[32m+[m[32m    time_t clock = 0;[m
[32m+[m
[32m+[m[32m    // Amig a bekert processek nem fogynak el ( a ready_queue-ban )[m
[32m+[m[32m    while (!ready_queue.empty()) {[m
[32m+[m
[32m+[m[32m        // Amig az eltelt ido kevesebb az erkezesi idonel[m
[32m+[m[32m        while (clock < ready_queue.top().AT) {[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[32m        if (p.temp_BT > 0) {[m
[32m+[m[32m            p.p_no = -1;[m
[32m+[m[32m            p.CT = clock;[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m        p = ready_queue.top();[m
[32m+[m[32m        ready_queue.pop();[m
[32m+[m[32m        p.set_RT(clock);[m
[32m+[m[32m        while (p.BT_left > 0) {[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            p.BT_left--;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[32m        p.set_CT(clock);[m
[32m+[m
[32m+[m[32m        // Gantt diagram frissitese[m
[32m+[m[32m        (*gantt).push(p);[m
[32m+[m[32m        p.temp_BT = 0;[m
[32m+[m
[32m+[m[32m        // Befejezesi ido frissitese[m
[32m+[m[32m        completion_queue.push(p);[m
[32m+[m[32m    }[m
[32m+[m[32m    return completion_queue;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// SJF algoritmus[m
[32m+[m[32mpriority_queue<process> SJF_P_run(priority_queue<process> ready_queue,[m
[32m+[m[32m                                  queue<process>* gantt)[m
[32m+[m[32m{[m
[32m+[m[32m    priority_queue<process> completion_queue;[m
[32m+[m[32m    process p;[m
[32m+[m[32m    time_t clock = 0;[m
[32m+[m
[32m+[m[41m  [m	[32m// Amig a bekert processek nem fogynak el ( a ready_queue-ban )[m
[32m+[m[32m    while (!ready_queue.empty()) {[m
[32m+[m[32m        while (clock < ready_queue.top().AT) {[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[32m        if (p.temp_BT > 0) {[m
[32m+[m[32m            p.p_no = -1;[m
[32m+[m[32m            p.CT = clock;[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m        p = pop_index(&ready_queue, min_BT_index(ready_queue, clock));[m
[32m+[m[32m        if (p.AT == p.start_AT)[m
[32m+[m[32m            p.set_RT(clock);[m
[32m+[m[32m        while (p.BT_left > 0 && (ready_queue.empty()[m
[32m+[m[32m                                 || clock < ready_queue.top().AT[m
[32m+[m[32m                                 || p.BT_left <= min_BT(ready_queue, clock))) {[m
[32m+[m[32m            p.BT_left--;[m
[32m+[m[32m            p.temp_BT++;[m
[32m+[m[32m            clock++;[m
[32m+[m[32m        }[m
[32m+[m[32m        if (p.BT_left == 0) {[m
[32m+[m[32m            p.AT = p.start_AT;[m
[32m+[m[32m            p.set_CT(clock);[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m            p.temp_BT = 0;[m
[32m+[m[32m            completion_queue.push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            p.AT = clock;[m
[32m+[m[32m            p.CT = clock;[m
[32m+[m[32m            (*gantt).push(p);[m
[32m+[m[32m            p.temp_BT = 0;[m
[32m+[m[32m            ready_queue.push(p);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
[32m+[m[32m    return completion_queue;[m
[32m+[m[32m}[m
[32m+[m[41m  [m
[32m+[m
[32m+[m[32m// Processek bekerese[m
[32m+[m[32mpriority_queue<process> set_process_data()[m
[32m+[m[32m{[m
[32m+[m[32m    priority_queue<process> ready_queue;[m
[32m+[m[32m    process temp;[m
[32m+[m
[32m+[m[32m    int NOP, i;[m
[32m+[m[32m    printf(" Megadni kivant proccessek szamossaga: ");[m
[32m+[m[32m    scanf("%d", &NOP);[m
[32m+[m[32m    for(i=0; i<NOP; i++)[m
[32m+[m[32m    {[m
[32m+[m[32m    printf("\n Adja meg az Erkezesi idot, a CPU idejet valamint a prioritast a process:[%d] -nek \n", i+1);[m
[32m+[m[32m    printf(" Erkezesi ido: \t");[m[41m  [m
[32m+[m[32m    scanf("%d", &temp.AT);[m
[32m+[m[32m    printf(" \n Cpu ido: \t");[m[41m [m
[32m+[m[32m    scanf("%d", &temp.BT);[m
[32m+[m[32m    printf(" \n Process prioritasa: \t");[m[41m [m
[32m+[m[32m    scanf("%d", &temp.priority);[m
[32m+[m[32m    temp.p_no = i + 1;[m
[32m+[m[32m    temp.P_set();[m
[32m+[m[32m    ready_queue.push(temp);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return ready_queue;[m
[32m+[m[32m}[m
[32m+[m[32m// Atlagok szamitasa:[m
[32m+[m[32m// Osszes varakozasi ido[m
[32m+[m[32mdouble get_total_WT(priority_queue<process> processes)[m
[32m+[m[32m{[m
[32m+[m[32m    double total = 0;[m
[32m+[m[32m    while (!processes.empty()) {[m
[32m+[m[32m        total += processes.top().WT;[m
[32m+[m[32m        processes.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    return total;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Osszes atfordulasi ido[m
[32m+[m[32mdouble get_total_TAT(priority_queue<process> processes)[m
[32m+[m[32m{[m
[32m+[m[32m    double total = 0;[m
[32m+[m[32m    while (!processes.empty()) {[m
[32m+[m[32m        total += processes.top().TAT;[m
[32m+[m[32m        processes.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    return total;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Osszes befejezesi ido[m
[32m+[m[32mdouble get_total_CT(priority_queue<process> processes)[m
[32m+[m[32m{[m
[32m+[m[32m    double total = 0;[m
[32m+[m[32m    while (!processes.empty()) {[m
[32m+[m[32m        total += processes.top().CT;[m
[32m+[m[32m        processes.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    return total;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Osszes valasz ido[m
[32m+[m[32mdouble get_total_RT(priority_queue<process> processes)[m
[32m+[m[32m{[m
[32m+[m[32m    double total = 0;[m
[32m+[m[32m    while (!processes.empty()) {[m
[32m+[m[32m        total += processes.top().RT;[m
[32m+[m[32m        processes.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    return total;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//FCFS tabla kirajzolasa[m
[32m+[m
[32m+[m[32mvoid disp(priority_queue<process> main_queue, bool high)[m
[32m+[m[32m{[m
[32m+[m[32m    int i = 0, temp, size = main_queue.size();[m
[32m+[m[32m    priority_queue<process> tempq = main_queue;[m
[32m+[m[32m    double temp1;[m
[32m+[m[32m    cout << "+-------------+--------------";[m
[32m+[m[32m    cout << "+------------+-----------------";[m
[32m+[m[32m    cout << "+-----------------+--------------+---------------+";[m
[32m+[m[32m    if (high == true)[m
[32m+[m[32m        cout << "----------+" << endl;[m
[32m+[m[32m    else[m
[32m+[m[32m        cout << endl;[m
[32m+[m[32m    cout << "| Process sz. | Erkezesi ido ";[m
[32m+[m[32m    cout << "| CPU ido | Befejezesi ido ";[m
[32m+[m[32m    cout << "| Atfordulasi ido | Varakozasi ido | Valasz ido |";[m
[32m+[m[32m    if (high == true)[m
[32m+[m[32m        cout << " Priority |" << endl;[m
[32m+[m[32m    else[m
[32m+[m[32m        cout << endl;[m
[32m+[m[32m    cout << "+-------------+--------------";[m
[32m+[m[32m    cout << "+------------+-----------------";[m
[32m+[m[32m    cout << "+-----------------+--------------+---------------+";[m
[32m+[m[32m    if (high == true)[m
[32m+[m[32m        cout << "----------+" << endl;[m
[32m+[m[32m    else[m
[32m+[m[32m        cout << endl;[m
[32m+[m[32m    while (!main_queue.empty()) {[m
[32m+[m[32m        temp = to_string(main_queue.top().p_no).length();[m
[32m+[m[32m        cout << '|' << string(6 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().p_no << string(7 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().start_AT).length();[m
[32m+[m[32m        cout << '|' << string(7 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().start_AT << string(7 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().BT).length();[m
[32m+[m[32m        cout << '|' << string(6 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().BT << string(6 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().CT).length();[m
[32m+[m[32m        cout << '|' << string(8 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().CT << string(9 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().TAT).length();[m
[32m+[m[32m        cout << '|' << string(8 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().TAT << string(9 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().WT).length();[m
[32m+[m[32m        cout << '|' << string(7 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().WT << string(7 - temp / 2, ' ');[m
[32m+[m[32m        temp = to_string(main_queue.top().RT).length();[m
[32m+[m[32m        cout << '|' << string(7 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m             << main_queue.top().RT << string(8 - temp / 2, ' ');[m
[32m+[m[32m        if (high == true) {[m
[32m+[m[32m            temp = to_string(main_queue.top().priority).length();[m
[32m+[m[32m            cout << '|' << string(5 - temp / 2 - temp % 2, ' ')[m
[32m+[m[32m                 << main_queue.top().priority << string(5 - temp / 2, ' ');[m
[32m+[m[32m        }[m
[32m+[m[32m        cout << "|\n";[m
[32m+[m[32m        main_queue.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    cout << "+-------------+--------------";[m
[32m+[m[32m    cout << "+------------+-----------------";[m
[32m+[m[32m    cout << "+-----------------+--------------+---------------+";[m
[32m+[m[32m    if (high == true)[m
[32m+[m[32m        cout << "----------+";[m
[32m+[m[32m    cout << endl;[m
[32m+[m[32m    temp1 = get_total_CT(tempq);[m
[32m+[m[32m    cout << "\nTotal Befejezesi ido :- " << temp1[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    cout << "Atlagos Befejezesi ido :- " << temp1 / size[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    temp1 = get_total_TAT(tempq);[m
[32m+[m[32m    cout << "\nTotal Atfordulasi ido :- " << temp1[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    cout << "Atlagos Atfordulasi ido :- " << temp1 / size[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    temp1 = get_total_WT(tempq);[m
[32m+[m[32m    cout << "\nTotal Varakozasi ido :- " << temp1[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    cout << "Atlagos Varakozasi ido :- " << temp1 / size[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    temp1 = get_total_RT(tempq);[m
[32m+[m[32m    cout << "\nTotal Valasz ido :- " << temp1[m
[32m+[m[32m         << endl;[m
[32m+[m[32m    cout << "Atlagos Valasz ido :- " << temp1 / size[m
[32m+[m[32m         << endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//Gantt rajzolasa[m
[32m+[m[32mvoid disp_gantt_chart(queue<process> gantt)[m
[32m+[m[32m{[m
[32m+[m[32m    int temp, prev = 0;[m
[32m+[m[32m    queue<process> spaces = gantt;[m
[32m+[m[32m    cout << "\n\nGantt abra(IS = idle statusz) :- \n\n+";[m
[32m+[m
[32m+[m[32m    // 1. sor[m
[32m+[m[32m    while (!spaces.empty()) {[m
[32m+[m[32m        cout << string(to_string(spaces.front().p_no).length()[m
[32m+[m[32m                           + (spaces.front().p_no != -1)[m
[32m+[m[32m                           + 2 * spaces.front().temp_BT,[m
[32m+[m[32m                       '-')[m
[32m+[m[32m             << "+";[m
[32m+[m[32m        spaces.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    cout << "\n|";[m
[32m+[m[32m    spaces = gantt;[m
[32m+[m
[32m+[m[32m    // 2. sor[m
[32m+[m[32m    while (!spaces.empty()) {[m
[32m+[m[32m        cout << string(spaces.front().temp_BT, ' ');[m
[32m+[m[32m        if (spaces.front().p_no == -1)[m
[32m+[m[32m            cout << "IS" << string(spaces.front().temp_BT, ' ') << '|';[m
[32m+[m[32m        else[m
[32m+[m[32m            cout << "P" << spaces.front().p_no[m
[32m+[m[32m                 << string(spaces.front().temp_BT, ' ') << '|';[m
[32m+[m[32m        spaces.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    spaces = gantt;[m
[32m+[m[32m    cout << "\n+";[m
[32m+[m
[32m+[m[32m    while (!spaces.empty()) {[m
[32m+[m[32m        cout << (string(to_string(spaces.front().p_no).length()[m
[32m+[m[32m                            + (spaces.front().p_no != -1)[m
[32m+[m[32m                            + 2 * spaces.front().temp_BT,[m
[32m+[m[32m                        '-'))[m
[32m+[m[32m             << "+";[m
[32m+[m[32m        spaces.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    spaces = gantt;[m
[32m+[m[32m    cout << "\n0";[m
[32m+[m[32m    //3. sor[m
[32m+[m[32m    while (!spaces.empty()) {[m
[32m+[m[32m        temp = to_string(spaces.front().CT).length();[m
[32m+[m[32m        cout << (string(to_string(spaces.front().p_no).length()[m
[32m+[m[32m                            + (spaces.front().p_no != -1)[m
[32m+[m[32m                            + 2 * spaces.front().temp_BT - temp / 2 - prev,[m
[32m+[m[32m                        ' '))[m
[32m+[m[32m             << spaces.front().CT;[m
[32m+[m[32m        prev = temp / 2 - temp % 2 == 0;[m
[32m+[m[32m        spaces.pop();[m
[32m+[m[32m    }[m
[32m+[m[32m    cout << "\n\n";[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m    // Tablak inicializasa[m
[32m+[m[32m    priority_queue<process> ready_queue;[m
[32m+[m[32m    priority_queue<process> completion_queue, completion_queue2, completion_queue3;[m
[32m+[m[32m    queue<process> gantt, gantt2, gantt3;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    // Adatok bekerdezese[m[41m	[m
[32m+[m[32m    ready_queue = set_process_data();[m
[32m+[m
[32m+[m[41m    [m
[32m+[m[32m    completion_queue = FCFS_run(ready_queue, &gantt);[m
[32m+[m
[32m+[m[32m    completion_queue2 = SJF_P_run(ready_queue, &gantt2);[m
[32m+[m
[32m+[m
[32m+[m[32m    int ms = 5;[m
[32m+[m
[32m+[m[32m    completion_queue3 = RR_run(ready_queue,ms ,&gantt3);[m
[32m+[m
[32m+[m[32m    // Tabla rajzolas fcfs[m
[32m+[m[32m    disp(completion_queue, false);[m
[32m+[m
[32m+[m[32m    // Gantt rajzolas fcfs[m
[32m+[m[32m    disp_gantt_chart(gantt);[m
[32m+[m
[32m+[m[32m     cout << "\n -SJF-  "[m[41m [m
[32m+[m[32m          << endl;[m
[32m+[m
[32m+[m[32m    // Tabla rajzolas sjf[m
[32m+[m[32m    disp(completion_queue2, false);[m
[32m+[m
[32m+[m[32m    // Gantt rajzolas sjf[m
[32m+[m[32m    disp_gantt_chart(gantt2);[m
[32m+[m
[32m+[m[32m     cout << "\n -RR-  "[m[41m [m
[32m+[m[32m          << endl;[m
[32m+[m
[32m+[m[32m    // Tabla rajzolas RR[m
[32m+[m[32m    disp(completion_queue3, false);[m
[32m+[m
[32m+[m[32m    cout << "\n MS:- " << ms << endl;[m
[32m+[m
[32m+[m[32m    // Gantt rajzolas RR[m
[32m+[m[32m    disp_gantt_chart(gantt3);[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
